package{	import flash.net.*;	import flash.display.Sprite;	import flash.events.*;	import flash.events.KeyboardEvent;		import gs.TweenLite;	import com.scripts.gameTimer.gameTimerStarter;	import com.scripts.highScores.highScoreStarter;	import com.scripts.backgrounds.backGround;	import com.scripts.hitdetection.detectionLayer;	import com.scripts.hero.heroStarter;	import com.scripts.scoreBoard.scoreboardBase;	import com.scripts.lives.livesStarter;	import com.scripts.vehicle.*;	import com.scripts.waterVehicle.*;	import com.scripts.attractor.attractorStarter;	import com.scripts.sound.*;	import thegameOver;	import nameInput;		public class mydocClass extends Sprite	{	private var level:Sprite;	private var myhighScoreStarter:highScoreStarter;	private var mygameTimerObj:gameTimerStarter;	private var myBackground:backGround;	private var myDetection:detectionLayer;	public var myHero:heroStarter;	private var mydirectionsPanel:directionsPanel	private var myscoreboardBase:scoreboardBase;	private var mylivesStarter:livesStarter;	private var myvehicle:vehicleStarter;	private var mywatervehicle:waterVehicleStarter;	private var myAttractor:attractorStarter;	private var myBgsound:soundStarter;	private var myBgsoundMove:soundStarter;	private var myBgsoundTruckDeath:soundStarter;	private var gameSpeed = 10;	private var deathFrogCount;	private var savedFrogCount;		private var currentNum:Number= 0;	private var HighNum:Number = 0;	private var DeadFrogger:Object = new Object;	private var savedFrogger:Object = new Object;		private var mygameOver:thegameOver = new thegameOver;		private var objHolderarray:Array = new Array();	private var myNameInput:nameInput = new nameInput();							public function mydocClass():void	{		deathFrogCount = 0;		savedFrogCount = 0;		currentNum = 0;		HighNum = 0;						// sets a local level to the the game objects		level = new Sprite;		addChild(level);				myAttractor = new attractorStarter;		addChild(myAttractor);		myAttractor.addEventListener("gameCreateCaller", gameCreate);		myAttractor.addEventListener("getHighScoreCaller", getHighScore);		myAttractor.addEventListener("directionsCaller", getDirections);			}			private function gameCreate(e:Event):void	{		level = new Sprite;		addChild(level);				//load background of the game		myBackground = new backGround();		level.addChild(myBackground);		objHolderarray.push(myBackground);				//load background of the game		myDetection = new detectionLayer();		level.addChild(myDetection);		objHolderarray.push(myDetection);				// sets a scoreBoard to the game 		//create new instance of the score		myscoreboardBase = new scoreboardBase;		level.addChild(myscoreboardBase);		objHolderarray.push(myscoreboardBase);		myscoreboardBase.x = gameSpeed;		myscoreboardBase.y = gameSpeed;				myvehicle = new vehicleStarter(level);		level.addChild(myvehicle);		//objHolderarray.push(myvehicle);				mywatervehicle = new waterVehicleStarter		level.addChild(mywatervehicle);		objHolderarray.push(mywatervehicle);				mylivesStarter = new livesStarter;		level.addChild(mylivesStarter);		mylivesStarter.addEventListener("gameover2", gameOver);		objHolderarray.push(livesStarter);					 		mygameTimerObj = new gameTimerStarter(850,15,level);		// add event to the times up o timer		mygameTimerObj.addEventListener("kill", timerGrogger);		// add the position of the timer		mygameTimerObj.newposition(40,725);				//load hero Object to the game		myHero = new heroStarter(level,stage.stageWidth,stage.stageHeight);				// add the Detection layer to stage		level.addChild(myHero);		objHolderarray.push(myHero);		myHero.myfrogger.y = 675;		addEventListener(KeyboardEvent.KEY_DOWN, keyHandlerfunction);		addEventListener(Event.ENTER_FRAME, EnterFrameDetection);		myBgsound = new soundStarter("dp_frogger.",true);	}			private function getHighScore(e:Event):void	{		myhighScoreStarter = new highScoreStarter(level,"get_getter");		addChild(myhighScoreStarter);		myhighScoreStarter.addEventListener("moveScore", moo);				myhighScoreStarter.x =  0 - (myhighScoreStarter.width);		myhighScoreStarter.y = 350;				TweenLite.to(myAttractor.mystartGame, 1, {x:2000});		TweenLite.to(myAttractor.myHighScore, 1, {x:2000});		TweenLite.to(myAttractor.mydirections, 1, {x:2000});				TweenLite.to(myhighScoreStarter, 1, {x:160});	}	private function moo(e:Event):void	{		myAttractor.mystartGame.x = 0;		myAttractor.myHighScore.x = 0;		myAttractor.mydirections.x = 0				TweenLite.to(myAttractor.mystartGame, 1, {x:200});		TweenLite.to(myAttractor.myHighScore, 1, {x:200});		TweenLite.to(myAttractor.mydirections, 1, {x:200});				TweenLite.to(myhighScoreStarter, 1, {x:2000});			}			private function getDirections(e:Event):void	{		TweenLite.to(myAttractor.mystartGame, 1, {x:2000});		TweenLite.to(myAttractor.myHighScore, 1, {x:2000});		TweenLite.to(myAttractor.mydirections, 1, {x:2000});						mydirectionsPanel = new directionsPanel();		mydirectionsPanel.x =  0 - mydirectionsPanel.width;		mydirectionsPanel.y =  350;				addChild(mydirectionsPanel);		TweenLite.to(mydirectionsPanel, 1, {x:mydirectionsPanel.width/2 - 75});				//mydirectionsPanel.x =  mydirectionsPanel.width/2 - 75;				mydirectionsPanel.directionsPanelButton.addEventListener(MouseEvent.CLICK,killDirectionsPanel);					}			private function timerGrogger(event:Event):void	{		myHero.myfrogger.y = 675;		myHero.myfrogger.x = 500;		currentNum= 0;		HighNum = 0;		mygameTimerObj.resetTimer();		mylivesStarter.killLive();	}			private function returnGrogger():void	{		myHero.myfrogger.y = 675;		myHero.myfrogger.x = 500;		currentNum= 0;		HighNum = 0;		mygameTimerObj.resetTimer();	}			private function gameOver(event:Event):void	{				mygameTimerObj.stopTimer();				removeEventListener(KeyboardEvent.KEY_DOWN, keyHandlerfunction);		myBgsound.soundstop();				mygameOver = new thegameOver;		level.addChild(mygameOver);		//objHolderarray.push(mygameOver);		mygameOver.y = 385;		mygameOver.x = (stage.stageWidth/2) - (mygameOver.width/2);		mygameOver.alpha = 0;		TweenLite.to(mygameOver, 1, {alpha:1,x:50});						level.addChild(myNameInput);		myNameInput.x = 900;		myNameInput.y = 395;		myNameInput.alpha = 0;		stage.focus = myNameInput.addNameInput;		myNameInput.submitButton.addEventListener(MouseEvent.CLICK,userScoreAdded);		TweenLite.to(myNameInput, 2, {alpha:1,x:300});											}	private function userScoreAdded(e:Event):void	{		trace("952");		stage.focus = stage;		var myname = myNameInput.addNameInput.text;		var endScore = myscoreboardBase.getScore();		trace("set_setter"+"&myname="+ myname +"&mypoints="+ endScore);		myhighScoreStarter = new highScoreStarter(level,String("set_setter"+"&myname="+ myname +"&mypoints="+ endScore));		if(savedFrogCount > 0 )					{																		savedFrogCount = 0;						for (var V:String in savedFrogger)						{							level.removeChild(savedFrogger[V]);						}					}		TweenLite.to(level, 1, {alpha:0,onComplete:removeGame});	}		private function removeGame():void	{		removeEventListener(Event.ENTER_FRAME, EnterFrameDetection);		mygameTimerObj.removeEventListener("kill", timerGrogger);		mylivesStarter.removeEventListener("gameover2", gameOver);		myNameInput.addNameInput.text = "here";		mywatervehicle.remove();		myvehicle.remove();		removeChild(level);	}		private function keyHandlerfunction(event:KeyboardEvent):void	{		if(event.keyCode == 37){updateFrog("left");}		if(event.keyCode == 38){updateFrog("up");}		if(event.keyCode == 39){updateFrog("right");}		if(event.keyCode == 40){updateFrog("down");}		if(event.keyCode == 37 || event.keyCode == 38 || event.keyCode == 39 || event.keyCode == 40)		myBgsoundMove = new soundStarter("dp_frogger_hop.",false);	}			private function killDirectionsPanel(e:Event):void	{		myAttractor.mystartGame.x =  - 200;		myAttractor.myHighScore.x = - 200;		myAttractor.mydirections.x = - 200;								TweenLite.to(myAttractor.mystartGame, 1, {x:200});		TweenLite.to(myAttractor.myHighScore, 1, {x:200});		TweenLite.to(myAttractor.mydirections, 1, {x:200});		TweenLite.to(mydirectionsPanel, 1,{x:2000,onComplete:killChildPanel});			}	private function killChildPanel():void	{		removeChild(mydirectionsPanel);	}	private function updateFrog(passed:String):void	{				if(passed == "left")		{						myHero.myfrogger.x -= 50;			myHero.myfrogger.frogLocal.rotation = 270;			if(myHero.myfrogger.x <= -50 && myHero.myfrogger.y <= 350){myHero.myfrogger.x = stage.stageWidth - 50};			if(myHero.myfrogger.x <= -50 && myHero.myfrogger.y >= 350)			{			DeadFrogger[deathFrogCount] = new deadfrog;			DeadFrogger[deathFrogCount].x = myHero.myfrogger.x + 55			DeadFrogger[deathFrogCount].y = myHero.myfrogger.y + 54						DeadFrogger[deathFrogCount].rotation = 270;			addChildAt(DeadFrogger[deathFrogCount],4);			killGrogger();			deathFrogCount++			myBgsoundTruckDeath = new soundStarter("dp_frogger_squash.",false);						}					return;								}else if(passed == "up")		{			myHero.myfrogger.y -= 50;						// checks to see is you get a point. If you have not been to this y location grooger get a point.			// for point added breakdown check the scoreBoard.as file for increments value.			if(currentNum == HighNum )			{				currentNum++;				HighNum++;				if(myHero.myfrogger.y >= 150){myscoreboardBase.addScore();}							}else			{				currentNum++			}			myHero.myfrogger.frogLocal.rotation = 360;						if(myHero.myfrogger.y < 100)			{				myHero.myfrogger.y = 100			};					return;					}else if(passed == "right")		{			myHero.myfrogger.x += 50;			myHero.myfrogger.frogLocal.rotation = 90;			if(myHero.myfrogger.x >= stage.stageWidth  && myHero.myfrogger.y <= 350){myHero.myfrogger.x = 0};			if(myHero.myfrogger.x >= stage.stageWidth  && myHero.myfrogger.y >= 350)			{				DeadFrogger[deathFrogCount] = new deadfrog;				DeadFrogger[deathFrogCount].x = myHero.myfrogger.x + 4				DeadFrogger[deathFrogCount].y = myHero.myfrogger.y - 5				DeadFrogger[deathFrogCount].rotation = 90;				addChildAt(DeadFrogger[deathFrogCount],4);				killGrogger();				deathFrogCount++				myBgsoundTruckDeath = new soundStarter("dp_frogger_squash.",false);							}						return;		}else if(passed == "down")		{						if(myHero.myfrogger.y != 675)			{				myHero.myfrogger.y += 50;				}else{trace("what");}						myHero.myfrogger.frogLocal.rotation = 180;			if(myHero.myfrogger.y > 650){myHero.myfrogger.y = 650};			currentNum--;			if(currentNum  < 0){currentNum = 0;}						return;		}	}	private function EnterFrameDetection(e:Event):void	{		var notOn:Boolean = false;						for (var s:String in myvehicle.vehicleOj)		{				if(myHero.myfrogger.hitTestObject(myvehicle.vehicleOj[s])){				DeadFrogger[deathFrogCount] = new deadfrog;				DeadFrogger[deathFrogCount].x = myHero.myfrogger.x 				DeadFrogger[deathFrogCount].y = myHero.myfrogger.y + 54				DeadFrogger[deathFrogCount].rotation = 270;				level.addChildAt(DeadFrogger[deathFrogCount],4);				killGrogger();				deathFrogCount++				myBgsoundTruckDeath = new soundStarter("dp_frogger_squash.",false);				}		}		for (var D:String in mywatervehicle.vehicleOj)		{			if(D=="1" || D=="2" || D=="5" || D=="6" || D=="9" || D=="10"){			if(myHero.myfrogger.hitTestObject(mywatervehicle.vehicleOj[D])){myHero.myfrogger.x -= 10;return}		}else{			if(myHero.myfrogger.hitTestObject(mywatervehicle.vehicleOj[D])){myHero.myfrogger.x += 10;return}		}							}				for(var i:int; i < myBackground.tiles.length; i++)		{			if(myHero.myfrogger.hitTestObject(myBackground.tiles[i]))			{								if(myBackground.tiles[i].name == 4)				{										for (var E:String in savedFrogger)					{					if(savedFrogger[E].openHouse == 50 && savedFrogger[E].openHouse == 200 && savedFrogger[E].openHouse == 350 && savedFrogger[E].openHouse == 500)					{												DeadFrogger[deathFrogCount] = new deadfrog;						DeadFrogger[deathFrogCount].x = myHero.myfrogger.x						DeadFrogger[deathFrogCount].y = myHero.myfrogger.y						level.addChildAt(DeadFrogger[deathFrogCount],4);						killGrogger();						deathFrogCount++;						myBgsoundTruckDeath = new soundStarter("dp_frogger_plunk.",false);												return					}					}										if(savedFrogCount == 5 )					{						gameSpeed+=1;						mywatervehicle.changeSpeed();						myvehicle.changeSpeed();						savedFrogCount = 0;												for (var V:String in savedFrogger)						{							level.removeChild(savedFrogger[V]);						}						return;					{										}					}										savedFrogger[savedFrogCount] = new frog;					savedFrogger[savedFrogCount].x = myBackground.tiles[i].x + 25;					savedFrogger[savedFrogCount].y = myBackground.tiles[i].y + 25;					savedFrogger[savedFrogCount].openHouse = myBackground.tiles[i].x;					level.addChild(savedFrogger[savedFrogCount]);															trace(savedFrogCount);					myscoreboardBase.addToScore(100);										TweenLite.to(savedFrogger[savedFrogCount], .5, {rotation:180});					savedFrogCount += 1;					myBgsoundTruckDeath = new soundStarter("frogSound.",false);										returnGrogger();										return;			}												// add dead grogger to stage/ also keeps track of the dead				if(myBackground.tiles[i].name == 5)				{										DeadFrogger[deathFrogCount] = new deadfrog;					DeadFrogger[deathFrogCount].x = myHero.myfrogger.x					DeadFrogger[deathFrogCount].y = myHero.myfrogger.y					level.addChildAt(DeadFrogger[deathFrogCount],4);					killGrogger();					deathFrogCount++;					myBgsoundTruckDeath = new soundStarter("dp_frogger_plunk.",false);				}						for(var P:int; P < myBackground.tiles.length; P++)		{			if(myHero.myfrogger.hitTestObject(myBackground.tiles[P]))			{				if(myBackground.tiles[P].name == 2 && notOn != true)				{										DeadFrogger[deathFrogCount] = new deadfrog;					DeadFrogger[deathFrogCount].x = myHero.myfrogger.x					DeadFrogger[deathFrogCount].y = myHero.myfrogger.y					level.addChild(DeadFrogger[deathFrogCount]);					killGrogger();					deathFrogCount++;					myBgsoundTruckDeath = new soundStarter("dp_frogger_plunk.",false);					return				}			}		}		if(myHero.myfrogger.x <= -50 ){myHero.myfrogger.x = stage.stageWidth - 50};			}}}	private function killGrogger():void	{		myHero.myfrogger.y = 675;		myHero.myfrogger.x = 500;		currentNum= 0;		HighNum = 0;		mygameTimerObj.resetTimer();		mylivesStarter.killLive();	}					}	}